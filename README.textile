Nothing better than a use case to explain the purpose of this gem.

* Suppose you have to build a dashboard in the admin area of your Rails app and you want to have the number of subscriptions per day.
* Suppose that you are using SQLite3 for development, MySQL for production (pretty standard setup)

Easily with SQL date functions, you could do that :
<pre>
Subscriber.select('STRFTIME("%Y-%m-%d", created_at) AS day, COUNT(*) AS subscriptions').group('day')
</pre>

Which would run this query :
<pre>
SELECT STRFTIME("%Y-%m-%d", created_at) AS day, COUNT(*) AS subscriptions
FROM subscribers
GROUP BY day
</pre>

... but wait... now the app has to go live in my production env which uses MySQL ! Replace @STRFTIME()@ with @DATE_FORMAT()@.
What if tomorrow I switch to PostgreSQL ? Replace @DATE_FORMAT()@ with @DATE_TRUNC()@.

This gem translate SQL functions that do the exact same thing, but have different syntax in each RDBMS that is being used.

These functions are implemented :
* count_by(column_name, :group_by => "day"|"month"|"year")
